---
/**
 * Componente para mostrar el estado de pico y placa de un vehículo
 * Este componente muestra si un vehículo puede circular según las reglas de pico y placa
 */

import { getEstadoPicoYPlaca } from '../lib/pico-y-placa.js';

// Definir la interfaz para la regla aplicada
interface ReglaAplicada {
  id: number;
  Ultimo_Digito: string[];
  tipo: string;
}

// Definir la interfaz para los detalles del estado
interface DetallesPicoYPlaca {
  placa?: string;
  fecha?: string;
  tipoVehiculoExento?: boolean;
  reglaAplicada?: ReglaAplicada | null;
  error?: string;
}

// Definir la interfaz para el estado de pico y placa
interface EstadoPicoYPlaca {
  estado: string;
  color: string;
  mensaje: string;
  detalles: DetallesPicoYPlaca;
}

// Props que pueden ser pasadas al componente
interface Props {
  placa: string;
  tipoVehiculoExento?: boolean;
  showDetails?: boolean;
}

const { 
  placa, 
  tipoVehiculoExento = false,
  showDetails = false
} = Astro.props;

// Obtener el estado de pico y placa
let estadoPicoYPlaca: EstadoPicoYPlaca = {
  estado: 'CARGANDO',
  color: 'gray',
  mensaje: 'Cargando estado de pico y placa...',
  detalles: {}
};

try {
  if (placa && placa.length >= 5) {
    // Convertir la placa a mayúsculas antes de procesarla
    const placaUpperCase = placa.toUpperCase();
    
    // Usar la fecha y hora actual del usuario
    const fechaActual = new Date();
    
    // Obtener el estado de pico y placa con la fecha actual
    const { getEstadoPicoYPlaca: getEstado } = await import('../lib/pico-y-placa.js');
    estadoPicoYPlaca = await getEstado(placaUpperCase, tipoVehiculoExento, fechaActual);
    
    // Verificar si el estado se calculó correctamente
    console.log('Estado pico y placa calculado con fecha actual:', estadoPicoYPlaca);
  } else {
    estadoPicoYPlaca = {
      estado: 'ERROR',
      color: 'yellow',
      mensaje: 'Placa inválida',
      detalles: { placa }
    };
  }
} catch (error: unknown) {
  console.error('Error al obtener estado de pico y placa:', error);
  estadoPicoYPlaca = {
    estado: 'ERROR',
    color: 'yellow',
    mensaje: 'Error al verificar el estado',
    detalles: { error: error instanceof Error ? error.message : String(error) }
  };
}

// Determinar las clases CSS según el estado
let statusClasses = '';
let iconName = '';

switch (estadoPicoYPlaca.color) {
  case 'green':
    statusClasses = 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';
    iconName = 'check-circle';
    break;
  case 'red':
    statusClasses = 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';
    iconName = 'x-circle';
    break;
  case 'yellow':
    statusClasses = 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';
    iconName = 'alert-triangle';
    break;
  default:
    statusClasses = 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';
    iconName = 'clock';
}
---

<div class={`pico-placa-status rounded-lg p-4 ${statusClasses}`}>
  <div class="flex items-center">
    <div class="flex-shrink-0">
      {iconName === 'check-circle' && (
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      )}
      {iconName === 'x-circle' && (
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      )}
      {iconName === 'alert-triangle' && (
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
        </svg>
      )}
      {iconName === 'clock' && (
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      )}
    </div>
    <div class="ml-3">
      <h3 class="text-lg font-medium">{estadoPicoYPlaca.estado}</h3>
      <div class="mt-1 text-sm">
        <p>{estadoPicoYPlaca.mensaje}</p>
      </div>
    </div>
  </div>
  
  {showDetails && (
    <div class="mt-3 pt-3 border-t border-gray-200 dark:border-gray-600">
      <div class="text-sm">
        <p><strong>Placa:</strong> {estadoPicoYPlaca.detalles.placa}</p>
        <p><strong>Fecha:</strong> {estadoPicoYPlaca.detalles.fecha ? new Date(estadoPicoYPlaca.detalles.fecha).toLocaleString() : 'No disponible'}</p>
        {estadoPicoYPlaca.detalles.reglaAplicada && (
          <div class="mt-2">
            <p><strong>Regla aplicada:</strong></p>
            <div class="mt-1 p-3 bg-gray-50 dark:bg-gray-800 rounded">
              <p class="text-sm mb-2">
                <span class="font-medium">Tipo de restricción:</span> {estadoPicoYPlaca.detalles.reglaAplicada.tipo}
              </p>
              <p class="text-sm mb-2">
                <span class="font-medium">Dígitos restringidos:</span> {estadoPicoYPlaca.detalles.reglaAplicada.Ultimo_Digito.join(', ')}
              </p>
              <p class="text-sm">
                <span class="font-medium">Aplicable en:</span> {estadoPicoYPlaca.detalles.reglaAplicada.id === 1 ? 'Días impares' : 'Días pares'}
              </p>
            </div>
          </div>
        )}
      </div>
    </div>
  )}
</div>