---
import UserLayout from '../../../layout/user.astro';
import PageHeader from '../../../components/PageHeader.astro';
import PicoPlacaStatus from '../../../components/PicoPlacaStatus.astro';
import { getVehiculoById } from '../../../lib/api.js';

// Definir la interfaz para el objeto vehiculo
interface Vehiculo {
  id: string;
  Placa: string;
  Tipo: string;
  Usuario: string;
  Modelo?: string; // Opcional porque puede no estar disponible por permisos
  Color?: string;  // Opcional porque puede no estar disponible por permisos
}

// Indicar a Astro que esta página debe renderizarse en el servidor
export const prerender = false;

// Obtener el ID del vehículo de los parámetros de la URL
const { id } = Astro.params;

// Obtener los datos del vehículo
let vehiculo: Vehiculo | null = null;
let error: string | null = null;

try {
  if (id) {
    vehiculo = await getVehiculoById(id) as Vehiculo;
  } else {
    error = 'ID de vehículo no proporcionado';
  }
  
  if (!vehiculo) {
    error = 'Vehículo no encontrado';
  }
} catch (e) {
  console.error('Error al obtener detalles del vehículo:', e);
  error = 'Error al cargar los detalles del vehículo';
}
---

<UserLayout title="Detalles del Vehículo - PicoAlert+" description="Detalles y estado de Pico y Placa de tu vehículo registrado.">
  <section class="bg-white dark:bg-gray-900">
    <div class="py-8 px-4 mx-auto max-w-2xl lg:py-16">
      <!-- Header utilizando el componente PageHeader -->
      <PageHeader 
        title={vehiculo ? `Vehículo: ${(vehiculo as Vehiculo).Placa?.toUpperCase() || 'Sin placa'}` : 'Detalles del Vehículo'}
        description={vehiculo ? `Información detallada y estado de Pico y Placa` : error || undefined}
        backUrl="/user/dashboard"
        backText="Volver al Dashboard"
      />
      
      {error && (
        <div class="p-4 mb-4 text-sm text-red-800 rounded-lg bg-red-50 dark:bg-gray-800 dark:text-red-400">
          <span class="font-medium">Error:</span> {error}
        </div>
      )}
      
      {vehiculo && (
        <div class="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-sm p-6 mt-6">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <!-- Información básica del vehículo -->
            <div>
              <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">Información del Vehículo</h3>
              
              <!-- Imagen del tipo de vehículo -->
              {(vehiculo as Vehiculo).Tipo && (
                <div class="mb-4 flex justify-center">
                  <img 
                    src={`/img_tipo_vehiculo/${(vehiculo as Vehiculo).Tipo === 'Automovil' ? 'automovil' : (vehiculo as Vehiculo).Tipo}.jpg`} 
                    alt={`Imagen de ${(vehiculo as Vehiculo).Tipo}`}
                    class="w-32 h-32 object-cover rounded-lg shadow-sm"
                    onerror="this.src='/img_tipo_vehiculo/automovil.jpg'; this.onerror=null;"
                  />
                </div>
              )}
              
              <div class="space-y-4">
                <div>
                  <p class="text-sm text-gray-500 dark:text-gray-400">Placa</p>
                  <p class="text-lg font-medium text-gray-900 dark:text-white">{(vehiculo as Vehiculo).Placa?.toUpperCase() || 'No disponible'}</p>
                </div>
                
                <div>
                  <p class="text-sm text-gray-500 dark:text-gray-400">Tipo</p>
                  <p class="text-lg font-medium text-gray-900 dark:text-white">
                    <span class="px-2 py-1 text-xs font-medium rounded-full inline-block mr-2 
                      ${(vehiculo as Vehiculo).Tipo?.toLowerCase().includes('carro') ? 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300' :
                      (vehiculo as Vehiculo).Tipo?.toLowerCase() === 'moto' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300' :
                      'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300'}
                    ">
                      {(vehiculo as Vehiculo).Tipo?.replace('_', ' ') || 'No especificado'}
                    </span>
                  </p>
                </div>
                
                {/* Nota: Los campos Modelo y Color no están disponibles actualmente debido a restricciones de permisos */}
                <div class="mt-6 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                  <p class="text-sm text-gray-600 dark:text-gray-400">
                    <svg class="w-4 h-4 inline-block mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    Para ver información adicional como modelo y color, contacta al administrador para actualizar los permisos de acceso.
                  </p>
                </div>
              </div>
            </div>
            
            <!-- Estado de Pico y Placa -->
            <div>
              <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">Estado de Pico y Placa</h3>
              
              <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
                {(vehiculo as Vehiculo).Placa ? (
                  <PicoPlacaStatus 
                    placa={(vehiculo as Vehiculo).Placa || ''} 
                    tipoVehiculoExento={false} 
                    showDetails={true} 
                  />
                ) : (
                  <p class="text-gray-500 dark:text-gray-400">No se puede determinar el estado de Pico y Placa sin una placa válida.</p>
                )}
              </div>
              
              <div class="mt-6">
                <h4 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Recordatorios</h4>
                <p class="text-sm text-gray-600 dark:text-gray-400 mb-2">
                  Recibirás notificaciones sobre el estado de Pico y Placa de este vehículo.
                </p>
                <p class="text-sm text-gray-600 dark:text-gray-400">
                  Puedes configurar tus preferencias de notificación en la sección de configuración.
                </p>
              </div>
            </div>
          </div>
          
          <!-- Acciones -->
          <div class="flex justify-end mt-6 space-x-4">
            <a href="/user/vehicles" class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 focus:ring-4 focus:ring-gray-200 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600 dark:focus:ring-gray-700">
              Volver a Mis Vehículos
            </a>
            <button id="edit-vehicle" class="px-4 py-2 text-sm font-medium text-white bg-primary-600 rounded-lg hover:bg-primary-700 focus:ring-4 focus:ring-primary-300 dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800">
              Editar Vehículo
            </button>
          </div>
        </div>
      )}
    </div>
  </section>
  
  <script define:vars={{ vehiculoId: id }}>
    // Script para manejar la edición del vehículo
    document.addEventListener('DOMContentLoaded', function() {
      const editButton = document.getElementById('edit-vehicle');
      if (editButton) {
        editButton.addEventListener('click', function() {
          // Por ahora, simplemente mostrar una alerta
          alert('Funcionalidad de edición en desarrollo');
          // En una implementación futura, redirigir a la página de edición
          // window.location.href = `/user/edit-vehicle/${vehiculoId}`;
        });
      }
    });
  </script>
</UserLayout>