---
import UserLayout from '../../layout/user.astro';
import PageHeader from '../../components/PageHeader.astro';
import StatusMessage from '../../components/StatusMessage.astro';
---

<UserLayout title="Dashboard - PicoAlert+" description="Panel de control para usuarios de PicoAlert+. Gestiona tus vehículos y notificaciones de Pico y Placa.">
    <section class="bg-white dark:bg-gray-900">
        <div class="py-8 px-4 mx-auto max-w-screen-xl lg:py-16">
            <!-- Contenedor de error global -->
            <div id="error-container" class="hidden mb-4 p-4 bg-red-100 border border-red-400 text-red-700 rounded-md">
                Ocurrió un error al cargar el dashboard. Por favor, intenta recargar la página.
            </div>
            
            <!-- Header con información del usuario utilizando el componente PageHeader -->
            <PageHeader 
                title="Bienvenido" 
                description="Gestiona tus vehículos y mantente informado sobre el Pico y Placa en Bogotá."
            />
            
            <!-- Mensajes de estado utilizando el componente StatusMessage -->
            <StatusMessage />

            <!-- Resumen de vehículos -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                <div class="bg-white dark:bg-blue-900/20 p-6 rounded-lg border border-blue-100 dark:border-blue-800 shadow-sm">
                    <h3 class="text-lg font-semibold text-blue-900 dark:text-blue-100 mb-2">Mis Vehículos</h3>
                    <p id="vehicle-count" class="text-3xl font-bold text-blue-600 dark:text-blue-400">-</p>
                    <p class="text-sm text-blue-700 dark:text-blue-300">Vehículos registrados</p>
                </div>
                
                <div class="bg-white dark:bg-green-900/20 p-6 rounded-lg border border-green-100 dark:border-green-800 shadow-sm">
                    <h3 class="text-lg font-semibold text-green-900 dark:text-green-100 mb-2">Estado Hoy</h3>
                    <p id="pico-status" class="text-3xl font-bold text-green-600 dark:text-green-400">-</p>
                    <p class="text-sm text-green-700 dark:text-green-300">Pico y Placa</p>
                    <p class="text-xs text-green-700 dark:text-green-300 mt-1">Restricción: 6:00 AM - 9:00 PM</p>
                    <!-- Loading indicator for Pico y Placa -->
                    <div id="loading-pico-placa" class="hidden mt-2">
                        <div class="inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-green-600 dark:border-green-400"></div>
                        <span class="text-xs text-green-700 dark:text-green-300 ml-1">Actualizando...</span>
                    </div>
                    <!-- Error indicator for Pico y Placa -->
                    <div id="error-pico-placa" class="hidden mt-2 text-xs text-red-600 dark:text-red-400">
                        Error al cargar datos
                    </div>
                </div>
                
                <div class="bg-white dark:bg-yellow-900/20 p-6 rounded-lg border border-yellow-100 dark:border-yellow-800 shadow-sm flex items-center justify-between">
                <div>
                    <h3 class="text-lg font-semibold text-yellow-900 dark:text-yellow-100 mb-2">Próxima Restricción</h3>
                    <p id="next-restriction" class="text-lg font-bold text-yellow-600 dark:text-yellow-400">-</p>
                    <p class="text-sm text-yellow-700 dark:text-yellow-300">Para tus vehículos</p>
                </div>
                <a 
                      href="/user/movility-suggestion" 
                      class="ml-2 p-2 rounded-full hover:bg-yellow-100 dark:hover:bg-yellow-800 transition-all duration-200"
                      title="Movilidad sostenible: consejos para moverte mejor y cuidar el ambiente">
                 <svg class="w-5 h-5 text-yellow-600 dark:text-yellow-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
               </svg></a>
                </div>
                </div>
            <!-- Vehículos recientes -->
            <div class="mb-8">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-2xl font-bold text-gray-900 dark:text-white">Mis Vehículos</h3>
                    <a href="/user/register-vehicle" class="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-secondary-500 rounded-lg hover:bg-secondary-600 focus:ring-4 focus:ring-secondary-300 dark:focus:ring-secondary-700 shadow-md cursor-pointer">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                        </svg>
                        Agregar Vehículo
                    </a>
                </div>
                
                <div id="vehicles-container" class="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
                    <div id="loading-vehicles" class="col-span-full flex justify-center items-center py-8">
                        <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
                        <span class="ml-2 text-gray-600">Cargando vehículos...</span>
                    </div>
                    <div id="no-vehicles" class="hidden col-span-full text-center py-8 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-100 dark:border-blue-800 shadow-md p-6">
                        <svg class="w-16 h-16 mx-auto text-blue-500 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v3m0 0v3m0-3h3m-3 0H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        <h3 class="text-xl font-bold text-blue-800 dark:text-blue-200 mb-2">No tienes vehículos registrados</h3>
                        <p class="text-blue-700 dark:text-blue-300 mb-4">Registra tu primer vehículo para recibir notificaciones personalizadas de Pico y Placa.</p>
                        <a href="/user/register-vehicle" class="inline-flex justify-center items-center py-3 px-5 text-base font-medium text-center text-white rounded-lg bg-blue-600 hover:bg-blue-700 focus:ring-4 focus:ring-blue-300 dark:focus:ring-blue-800 shadow-md transition-all duration-300">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                            </svg>
                            Registrar mi Vehículo
                        </a>
                    </div>
                    <div id="error-loading-vehicles" class="hidden col-span-full text-center py-8">
                        <p class="text-red-600">Hubo un problema al cargar tus vehículos.</p>
                        <button id="reload-vehicles" class="mt-2 px-4 py-2 bg-primary text-white rounded hover:bg-primary-dark">
                            Intentar nuevamente
                        </button>
                    </div>
                </div>
            </div>

            <!-- Opciones rápidas -->
            <div class="mt-8">
                <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">Opciones Rápidas</h3>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    <a href="/user/pico-y-placa" class="flex items-center p-4 bg-white border border-gray-200 rounded-lg shadow-sm hover:shadow-md hover:bg-gray-50 dark:bg-gray-800 dark:border-gray-700 dark:hover:bg-gray-700 transition-all duration-200">
                        <div class="flex-shrink-0">
                            <svg class="w-8 h-8 text-primary-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                        </div>
                        <div class="ml-4">
                            <h4 class="text-lg font-semibold text-gray-900 dark:text-white">Pico y Placa Hoy</h4>
                            <p class="text-sm text-gray-500 dark:text-gray-400">Ver restricciones actuales</p>
                        </div>
                    </a>
                    
                    <a href="/user/vehicles" class="flex items-center p-4 bg-white border border-gray-200 rounded-lg shadow-sm hover:shadow-md hover:bg-gray-50 dark:bg-gray-800 dark:border-gray-700 dark:hover:bg-gray-700 transition-all duration-200">
                        <div class="flex-shrink-0">
                            <svg class="w-8 h-8 text-primary-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                            </svg>
                        </div>
                        <div class="ml-4">
                            <h4 class="text-lg font-semibold text-gray-900 dark:text-white">Gestionar Vehículos</h4>
                            <p class="text-sm text-gray-500 dark:text-gray-400">Ver y editar tus vehículos</p>
                        </div>
                    </a>
                    
                    <a href="/user/notifications" class="flex items-center p-4 bg-white border border-gray-200 rounded-lg shadow-sm hover:shadow-md hover:bg-gray-50 dark:bg-gray-800 dark:border-gray-700 dark:hover:bg-gray-700 transition-all duration-200">
                        <div class="flex-shrink-0">
                            <svg class="w-8 h-8 text-primary-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5zM4 19h6v-2H4v2zM4 15h8v-2H4v2zM4 11h8V9H4v2z"></path>
                            </svg>
                        </div>
                        <div class="ml-4">
                            <h4 class="text-lg font-semibold text-gray-900 dark:text-white">Notificaciones</h4>
                            <p class="text-sm text-gray-500 dark:text-gray-400">Configurar alertas</p>
                        </div>
                    </a>
                    
                    <a href="/user/calendar" class="flex items-center p-4 bg-white border border-gray-200 rounded-lg shadow-sm hover:shadow-md hover:bg-gray-50 dark:bg-gray-800 dark:border-gray-700 dark:hover:bg-gray-700 transition-all duration-200">
                        <div class="flex-shrink-0">
                            <svg class="w-8 h-8 text-primary-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                            </svg>
                        </div>
                        <div class="ml-4">
                            <h4 class="text-lg font-semibold text-gray-900 dark:text-white">Calendario</h4>
                            <p class="text-sm text-gray-500 dark:text-gray-400">Ver restricciones futuras</p>
                        </div>
                    </a>
                </div>
            </div>
        </div>
    </section>

    <script>
        import { useAuthStore } from '../../lib/auth-store.js';
        import { getVehiculos, getReglasPicoYPlaca, isAuthenticated } from '../../lib/api.js';
        
        // Función para configurar los botones de acción rápida
        function setupQuickActions() {
            try {
                // Usar un selector más específico y robusto
                const quickActionsContainer = document.querySelector('div.mt-8 div.grid');
                
                if (!quickActionsContainer) {
                    console.warn('No se encontró el contenedor de acciones rápidas');
                    return;
                }
                
                const quickActionLinks = quickActionsContainer.querySelectorAll('a');
                
                if (quickActionLinks.length === 0) {
                    console.warn('No se encontraron enlaces de acción rápida');
                    return;
                }
                
                quickActionLinks.forEach(link => {
                    // Verificar que el enlace tenga un href válido
                    const href = link.getAttribute('href');
                    if (!href) {
                        console.warn('Enlace sin atributo href encontrado');
                        return;
                    }
                    
                    // Eliminar event listeners existentes para evitar duplicados
                    const newLink = link.cloneNode(true);
                    if (link.parentNode) {
                        link.parentNode.replaceChild(newLink, link);
                    } else {
                        console.warn('No se pudo reemplazar el enlace: parentNode es null');
                        return; // Salir de la función si no hay parentNode
                    }
                    
                    newLink.addEventListener('click', (event) => {
                        try {
                            // Verificar autenticación antes de navegar
                            const authStore = useAuthStore.getState();
                            if (!authStore || !authStore.isAuthenticated) {
                                console.warn('Usuario no autenticado al intentar navegar');
                                event.preventDefault();
                                window.location.href = '/login';
                                return;
                            }
                            
                            console.log('Navegando a:', href);
                            // No es necesario hacer nada más, el navegador manejará la navegación
                        } catch (error) {
                            console.error('Error al manejar clic en acción rápida:', error);
                            // Permitir que la navegación continúe incluso si hay un error
                        }
                    });
                });
                
                console.log('Enlaces de acción rápida configurados correctamente');
            } catch (error) {
                console.error('Error al configurar los enlaces de acción rápida:', error);
                // Intentar configurar los enlaces de nuevo después de un breve retraso
                setTimeout(() => {
                    try {
                        setupQuickActions();
                    } catch (retryError) {
                        console.error('Error al reintentar configurar enlaces:', retryError);
                    }
                }, 1000);
            }
        }
        
        document.addEventListener('DOMContentLoaded', async () => {
            try {
                console.log('DOM cargado, iniciando dashboard');
                
                // Mostrar mensaje de carga inicial
                const loadingMessage = document.createElement('div');
                loadingMessage.id = 'dashboard-loading';
                loadingMessage.className = 'fixed top-0 left-0 w-full bg-blue-100 text-blue-700 p-2 text-center z-50';
                loadingMessage.textContent = 'Cargando dashboard...';
                document.body.prepend(loadingMessage);
                
                // Verificar autenticación
                const authStore = useAuthStore.getState();
                
                if (!authStore) {
                    console.error('No se pudo acceder al store de autenticación');
                    window.location.href = '/login?error=auth_store_not_found';
                    return;
                }
                
                // Validar sesión con el servidor antes de continuar
                try {
                    console.log('Estado antes de validar sesión:', { 
                        hasUser: !!authStore.user,
                        hasToken: !!authStore.token,
                        isAuthenticated: authStore.isAuthenticated
                    });
                    
                    const isValid = await authStore.validateSession();
                    
                    // Obtener el estado actualizado inmediatamente después de la validación
                    const stateAfterValidation = useAuthStore.getState();
                    console.log('Estado después de validar sesión:', { 
                        hasUser: !!stateAfterValidation.user,
                        hasToken: !!stateAfterValidation.token,
                        isAuthenticated: stateAfterValidation.isAuthenticated,
                        validationResult: isValid
                    });
                    
                    // Solo redirigir si la validación falla explícitamente
                    if (isValid === false) {
                        console.error('Validación de sesión fallida - Token inválido o expirado');
                        window.location.href = '/login?error=session_expired';
                        return;
                    }
                    
                    // Si la validación fue exitosa
                    if (isValid === true) {
                        console.log('Sesión validada correctamente');
                    }
                    // Si no pudimos verificar la autenticación (null)
                    else if (isValid === null) {
                        console.log('No se pudo verificar la autenticación debido a problemas de conexión');
                        // Mostrar un mensaje al usuario pero permitir continuar
                        const statusMessage = document.createElement('div');
                        statusMessage.className = 'fixed top-0 left-0 w-full bg-yellow-100 text-yellow-700 p-2 text-center z-50';
                        statusMessage.textContent = 'No se pudo verificar la conexión con el servidor. Algunas funciones podrían no estar disponibles.';
                        document.body.prepend(statusMessage);
                        
                        // Ocultar el mensaje después de 5 segundos
                        setTimeout(() => {
                            statusMessage.remove();
                        }, 5000);
                    }
                    
                    console.log('Continuando con la sesión actual');
                } catch (sessionError) {
                    console.error('Error al validar sesión:', sessionError);
                    // No redirigir automáticamente en caso de error
                    // Podría ser un problema temporal de conexión
                    const errorMessage = document.createElement('div');
                    errorMessage.className = 'fixed top-0 left-0 w-full bg-yellow-100 text-yellow-700 p-2 text-center z-50';
                    errorMessage.textContent = 'Error al conectar con el servidor. Algunas funciones podrían no estar disponibles.';
                    document.body.prepend(errorMessage);
                    
                    // Ocultar el mensaje después de 5 segundos
                    setTimeout(() => {
                        errorMessage.remove();
                    }, 5000);
                }
                
                // Obtener el estado actualizado después de la validación
                const updatedAuthStore = useAuthStore.getState();
                console.log('Estado completo después de validación:', { 
                    hasUser: !!updatedAuthStore.user,
                    hasToken: !!updatedAuthStore.token,
                    isAuthenticated: updatedAuthStore.isAuthenticated,
                    isLoading: updatedAuthStore.isLoading
                });
                
                // Verificar si el usuario está autenticado
                if (!updatedAuthStore.isAuthenticated) {
                    console.log('Usuario no autenticado según el store, redirigiendo a login');
                    // Añadir un pequeño retraso para permitir que los logs se muestren
                    setTimeout(() => {
                        window.location.href = '/login?error=not_authenticated';
                    }, 500);
                    return;
                } else {
                    console.log('Usuario autenticado según el store, continuando con la carga del dashboard');
                }
                
                // Obtener información del usuario
                const currentUser = authStore.user;
                if (currentUser) {
                    // Asegurarse de que siempre haya un nombre para mostrar
                    let displayName = 'Usuario';
                    
                    // Usar nombre completo si están disponibles first_name y last_name
                    if (currentUser.first_name && currentUser.last_name) {
                        displayName = `${currentUser.first_name} ${currentUser.last_name}`;
                    } else if (currentUser.first_name) {
                        displayName = currentUser.first_name;
                    } else if (currentUser.name) {
                        displayName = currentUser.name;
                    } else if (currentUser.email) {
                        displayName = currentUser.email;
                    }
                    
                    // Actualizar el título del PageHeader con el nombre del usuario
                    const pageHeaderTitle = document.querySelector('h2.text-3xl.font-bold.text-gray-900');
                    if (pageHeaderTitle) {
                        pageHeaderTitle.textContent = `Bienvenido, ${displayName}`;
                    } else {
                        console.warn('No se encontró el elemento del título del PageHeader');
                    }
                }
                
                // Configurar acciones rápidas
                setupQuickActions();
                
                // Cargar vehículos del usuario
                await loadUserVehicles();
                
                // Cargar información de Pico y Placa
                await loadPicoYPlacaInfo();
                
                // Ocultar mensaje de carga
                const loadingElement = document.getElementById('dashboard-loading');
                if (loadingElement) {
                    loadingElement.remove();
                }
                
                console.log('Dashboard inicializado correctamente');
            } catch (error) {
                console.error('Error al inicializar el dashboard:', error);
                // Mostrar mensaje de error al usuario
                const errorContainer = document.getElementById('error-container');
                if (errorContainer) {
                    errorContainer.classList.remove('hidden');
                    errorContainer.textContent = `Ocurrió un error al cargar el dashboard: ${error instanceof Error ? error.message : 'Error desconocido'}. Por favor, intenta recargar la página.`;
                }
                
                // Ocultar mensaje de carga si existe
                const loadingElement = document.getElementById('dashboard-loading');
                if (loadingElement) {
                    loadingElement.remove();
                }
                
                // Intentar cargar funcionalidades básicas a pesar del error
                try {
                    setupQuickActions();
                } catch (setupError) {
                    console.error('Error al configurar acciones rápidas:', setupError);
                }
            }
        });
        
        async function loadUserVehicles() {
            console.log('Iniciando carga de vehículos');
            
            // Obtener referencias a los elementos del DOM
            const vehiclesContainer = document.getElementById('vehicles-container');
            const loadingElement = document.getElementById('loading-vehicles');
            const noVehiclesElement = document.getElementById('no-vehicles');
            const errorElement = document.getElementById('error-loading-vehicles');
            const vehicleCountElement = document.getElementById('vehicle-count');
            const errorContainer = document.getElementById('error-container');
            
            // Verificar que todos los elementos del DOM existan
            if (!vehiclesContainer || !loadingElement || !noVehiclesElement || !errorElement || !vehicleCountElement) {
                console.error('No se encontraron elementos del DOM necesarios para cargar vehículos');
                if (errorContainer) {
                    errorContainer.classList.remove('hidden');
                    errorContainer.textContent = 'Error: No se encontraron elementos necesarios en la página. Por favor, recarga la página.';
                }
                return;
            }
            
            // Mostrar indicador de carga y ocultar otros elementos
            loadingElement.classList.remove('hidden');
            noVehiclesElement.classList.add('hidden');
            errorElement.classList.add('hidden');
            
            try {
                // Verificar autenticación antes de intentar cargar vehículos
                console.log('Verificando autenticación para cargar vehículos');
                let isAuth = false;
                
                try {
                    // Verificar autenticación usando el store primero (más rápido)
                    const authStore = useAuthStore.getState();
                    if (authStore && authStore.isAuthenticated) {
                        isAuth = true;
                    } else {
                        // Si no está autenticado en el store, verificar con el servidor
                        const authResult = await isAuthenticated();
                        isAuth = authResult.isAuthenticated === true;
                    }
                    console.log('Resultado de autenticación:', isAuth);
                } catch (authError) {
                    console.error('Error al verificar autenticación para cargar vehículos:', authError);
                    loadingElement.classList.add('hidden');
                    errorElement.classList.remove('hidden');
                    errorElement.innerHTML = `
                        <p>Error al verificar la autenticación. <button id="retry-auth" class="text-blue-600 hover:underline">Reintentar</button></p>
                    `;
                    // Agregar evento al botón de reintento
                    const retryButton = document.getElementById('retry-auth');
                    if (retryButton) {
                        retryButton.addEventListener('click', loadUserVehicles);
                    }
                    vehicleCountElement.textContent = '0';
                    return;
                }
                
                if (!isAuth) {
                    console.error('No hay autenticación para cargar vehículos');
                    loadingElement.classList.add('hidden');
                    errorElement.classList.remove('hidden');
                    errorElement.innerHTML = `
                        <p>No estás autenticado. <a href="/login" class="text-blue-600 hover:underline">Iniciar sesión</a></p>
                    `;
                    vehicleCountElement.textContent = '0';
                    return;
                }
                
                console.log('Obteniendo vehículos del usuario');
                let vehicles = [];
                let retryCount = 0;
                const maxRetries = 2;
                
                // Función para obtener vehículos con reintentos
                async function fetchVehiclesWithRetry() {
                    try {
                        const result = await getVehiculos();
                        if (!Array.isArray(result)) {
                            console.warn('La respuesta de vehículos no es un array, intentando convertir:', result);
                            // Intentar convertir a array si es posible
                            if (result && typeof result === 'object') {
                                return Object.values(result);
                            }
                            return [];
                        }
                        return result;
                    } catch (error) {
                        console.error(`Error al obtener vehículos (intento ${retryCount + 1}/${maxRetries + 1}):`, error);
                        if (retryCount < maxRetries) {
                            retryCount++;
                            console.log(`Reintentando obtener vehículos (intento ${retryCount + 1}/${maxRetries + 1})...`);
                            // Esperar antes de reintentar
                            await new Promise(resolve => setTimeout(resolve, 1000));
                            return fetchVehiclesWithRetry();
                        }
                        throw error;
                    }
                }
                
                try {
                    vehicles = await fetchVehiclesWithRetry();
                    console.log('Vehículos obtenidos:', vehicles);
                } catch (vehicleError) {
                    console.error('Error al obtener vehículos después de reintentos:', vehicleError);
                    loadingElement.classList.add('hidden');
                    errorElement.classList.remove('hidden');
                    errorElement.innerHTML = `
                        <p>Error al cargar los vehículos. <button id="retry-vehicles" class="text-blue-600 hover:underline">Reintentar</button></p>
                    `;
                    // Agregar evento al botón de reintento
                    const retryButton = document.getElementById('retry-vehicles');
                    if (retryButton) {
                        retryButton.addEventListener('click', loadUserVehicles);
                    }
                    vehicleCountElement.textContent = '0';
                    return;
                }
                
                console.log('Ocultando indicador de carga');
                loadingElement.classList.add('hidden');
                
                // Limpiar el contenedor de vehículos antes de agregar nuevos
                // Usar una forma más segura de limpiar el contenedor
                const childrenToRemove = [];
                for (let i = 0; i < vehiclesContainer.children.length; i++) {
                    const child = vehiclesContainer.children[i];
                    if (child.id !== 'loading-vehicles' && 
                        child.id !== 'no-vehicles' &&
                        child.id !== 'error-loading-vehicles') {
                        childrenToRemove.push(child);
                    }
                }
                
                childrenToRemove.forEach(child => {
                    try {
                        vehiclesContainer.removeChild(child);
                    } catch (error) {
                        console.warn('Error al eliminar hijo del contenedor:', error);
                    }
                });
                
                if (vehicles && vehicles.length > 0) {
                    console.log('Mostrando', vehicles.length, 'vehículos');
                    vehicleCountElement.textContent = vehicles.length.toString();
                    noVehiclesElement.classList.add('hidden');
                    errorElement.classList.add('hidden');
                    
                    // Mostrar solo los primeros 3 vehículos en el dashboard
                    const displayVehicles = vehicles.slice(0, 3);
                    
                    // Crear un fragmento para mejorar el rendimiento
                    const fragment = document.createDocumentFragment();
                    
                    for (const vehicle of displayVehicles) {
                        if (vehicle && typeof vehicle === 'object') {
                            try {
                                const vehicleCard = await createVehicleCard(vehicle);
                                if (vehicleCard) {
                                    fragment.appendChild(vehicleCard);
                                } else {
                                    console.error('La tarjeta de vehículo es null o undefined');
                                }
                            } catch (cardError) {
                                console.error('Error al crear tarjeta de vehículo:', cardError);
                            }
                        } else {
                            console.warn('Vehículo inválido encontrado:', vehicle);
                        }
                    }
                    
                    // Agregar todas las tarjetas de una vez
                    vehiclesContainer.appendChild(fragment);
                    
                    if (vehicles.length > 3) {
                        try {
                            const moreCard = await createMoreVehiclesCard(vehicles.length - 3);
                            if (moreCard) {
                                vehiclesContainer.appendChild(moreCard);
                            } else {
                                console.error('La tarjeta de "Ver más" es null o undefined');
                            }
                        } catch (moreCardError) {
                            console.error('Error al crear tarjeta de "Ver más":', moreCardError);
                        }
                    }
                } else {
                    console.log('No se encontraron vehículos para este usuario');
                    vehicleCountElement.textContent = '0';
                    errorElement.classList.add('hidden');
                    
                    try {
                        // Mostrar mensaje personalizado cuando no hay vehículos
                        const noVehiclesMessage = document.createElement('div');
                        noVehiclesMessage.className = 'col-span-full text-center py-8 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-6 shadow-sm';
                        noVehiclesMessage.innerHTML = `
                            <div class="flex flex-col items-center justify-center space-y-4">
                                <svg class="w-16 h-16 text-primary-500 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v3m0 0v3m0-3h3m-3 0H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                                <h3 class="text-xl font-bold text-gray-900 dark:text-white">No tienes vehículos registrados</h3>
                                <p class="text-gray-600 dark:text-gray-400 mb-4">Registra tu primer vehículo para recibir alertas de Pico y Placa</p>
                                <a href="/user/register-vehicle" class="inline-flex items-center px-6 py-3 text-base font-medium text-white bg-primary-600 rounded-lg hover:bg-primary-700 focus:ring-4 focus:ring-primary-300 dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800 shadow-md transition-all duration-200">
                                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                                    </svg>
                                    Registrar mi primer vehículo
                                </a>
                            </div>
                        `;
                        
                        vehiclesContainer.appendChild(noVehiclesMessage);
                        noVehiclesElement.classList.add('hidden');
                    } catch (noVehiclesError) {
                        console.error('Error al mostrar mensaje de no vehículos:', noVehiclesError);
                        noVehiclesElement.classList.remove('hidden');
                    }
                }
            } catch (error) {
                console.error('Error loading vehicles:', error);
                if (loadingElement && errorElement && vehicleCountElement) {
                    loadingElement.classList.add('hidden');
                    errorElement.classList.remove('hidden');
                    errorElement.innerHTML = `
                        <p>Error inesperado al cargar vehículos. <button id="retry-vehicles-error" class="text-blue-600 hover:underline">Reintentar</button></p>
                    `;
                    // Agregar evento al botón de reintento
                    const retryButton = document.getElementById('retry-vehicles-error');
                    if (retryButton) {
                        retryButton.addEventListener('click', loadUserVehicles);
                    }
                    vehicleCountElement.textContent = '0';
                }
            }
            console.log('Finalizada la carga de vehículos');
        }
        
        // Agregar event listener para el botón de recarga
        document.addEventListener('DOMContentLoaded', function() {
            const reloadButton = document.getElementById('reload-vehicles');
            if (reloadButton) {
                reloadButton.addEventListener('click', loadUserVehicles);
            }
        });
        async function createVehicleCard(vehicle: any) {
            if (!vehicle || typeof vehicle !== 'object') {
                console.error('Datos de vehículo inválidos:', vehicle);
                const errorCard = document.createElement('div');
                errorCard.className = 'bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4 shadow-sm';
                errorCard.textContent = 'Error: Datos de vehículo inválidos';
                return errorCard;
            }
            
            const card = document.createElement('div');
            card.className = 'bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow';
            
            try {
                // Verificar que las propiedades necesarias existan y establecer valores por defecto
                const placa = (vehicle.Placa || vehicle.placa || 'Sin placa').toUpperCase();
                const modelo = vehicle.Modelo || vehicle.modelo || '';
                const tipo = vehicle.Tipo || vehicle.tipo || 'Desconocido';
                const id = vehicle.id || vehicle.ID || '';
                
                // Determinar el estado de Pico y Placa para este vehículo
                let picoPlacaStatus = 'Desconocido';
                let statusClass = 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';
                
                try {
                    // Importar la función getEstadoPicoYPlaca
                    const getEstadoPicoYPlacaModule = await import('../../lib/pico-y-placa.js');
                    const getEstadoPicoYPlaca = getEstadoPicoYPlacaModule.getEstadoPicoYPlaca;
                    
                    // Verificar si la placa es válida
                    if (placa && placa !== 'Sin placa') {
                        // Obtener el estado de pico y placa usando la función de la librería
                        // que utiliza la fecha actual y las reglas dinámicas
                        const estadoPicoYPlaca = await getEstadoPicoYPlaca(placa);
                        
                        console.log('Estado de pico y placa obtenido:', estadoPicoYPlaca);
                        
                        // Mapear el estado a los valores que necesitamos para la UI
                        if (estadoPicoYPlaca.estado === 'PERMITIDO') {
                            picoPlacaStatus = 'Libre';
                            statusClass = 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';
                        } else if (estadoPicoYPlaca.estado === 'RESTRINGIDO') {
                            picoPlacaStatus = 'Restringido';
                            statusClass = 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';
                        } else {
                            picoPlacaStatus = 'Verificar';
                            statusClass = 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';
                        }
                    } else {
                        picoPlacaStatus = 'Verificar';
                        statusClass = 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';
                    }
                } catch (picoPlacaError) {
                    console.error('Error al determinar estado de Pico y Placa:', picoPlacaError);
                    picoPlacaStatus = 'Error';
                    statusClass = 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';
                }
                
                card.innerHTML = `
                    <div class="flex items-center justify-between mb-2">
                        <h4 class="text-lg font-semibold text-gray-900 dark:text-white">${placa}</h4>
                        <div class="flex items-center">
                            <img 
                                src="/img_tipo_vehiculo/${tipo === 'Automovil' ? 'automovil' : tipo}.jpg" 
                                alt="Imagen de ${tipo}" 
                                class="w-8 h-8 object-cover rounded-full mr-2 shadow-sm"
                                onerror="this.src='/img_tipo_vehiculo/automovil.jpg'; this.onerror=null;"
                            />
                            <span class="px-2 py-1 text-xs font-medium rounded-full ${
                                tipo.toLowerCase().includes('carro') ? 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300' :
                                tipo.toLowerCase() === 'moto' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300' :
                                'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300'
                            }">
                                ${tipo.replace('_', ' ')}
                            </span>
                        </div>
                    </div>
                    <div class="text-sm text-gray-600 dark:text-gray-400 mb-3">${modelo ? modelo : 'Vehículo registrado'}</div>
                    <div class="flex justify-between items-center">
                        <span class="px-2 py-1 text-xs font-medium rounded-full ${statusClass}">
                            ${picoPlacaStatus}
                        </span>
                        <a href="/user/vehicle-details/${id}" class="text-xs text-primary-600 hover:text-primary-800 dark:text-primary-400 dark:hover:text-primary-300">
                            Ver detalles
                        </a>
                    </div>
                `;
                
                // Agregar evento de clic para ir a los detalles del vehículo
                card.addEventListener('click', (event) => {
                    // Solo navegar si el clic no fue en el enlace "Ver detalles"
                    const target = event.target as HTMLElement;
                    if (target && !target.closest('a')) {
                        window.location.href = `/user/vehicle-details/${id}`;
                    }
                });
                
                // Agregar cursor de puntero para indicar que es clickeable
                card.style.cursor = 'pointer';
                
            } catch (error) {
                console.error('Error al crear la tarjeta del vehículo:', error);
                card.innerHTML = `
                    <div class="text-center text-red-600 dark:text-red-400">
                        <p>Error al mostrar el vehículo</p>
                        <p class="text-xs">${error instanceof Error ? error.message : 'Error desconocido'}</p>
                    </div>
                `;
            }
            
            return card;
        }
        
        async function createMoreVehiclesCard(count: number) {
            // Validar que count sea un número válido
            if (typeof count !== 'number' || isNaN(count) || count < 0) {
                count = 0; // Valor por defecto si count no es válido
            }
            
            const card = document.createElement('div');
            card.className = 'bg-white dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-lg p-4 flex items-center justify-center shadow-sm hover:shadow-md transition-all duration-200';
            
            try {
                card.innerHTML = `
                    <a href="/user/vehicles" class="text-center">
                        <div class="text-gray-400 dark:text-gray-500 mb-2">
                            <svg class="mx-auto h-8 w-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                            </svg>
                        </div>
                        <p class="text-sm font-medium text-gray-600 dark:text-gray-400">+${count} vehículos más</p>
                        <p class="text-xs text-gray-500 dark:text-gray-500">Ver todos</p>
                    </a>
                `;
            } catch (error) {
                console.error('Error al crear la tarjeta de "Ver más":', error);
                card.textContent = 'Ver más vehículos';
            }
            
            return card;
        }
        
        async function loadPicoYPlacaInfo() {
            console.log('Iniciando carga de información de Pico y Placa');
            
            // Obtener referencias a los elementos del DOM
            const picoStatusElement = document.getElementById('pico-status');
            const nextRestrictionElement = document.getElementById('next-restriction');
            const picoPlacaLoadingElement = document.getElementById('loading-pico-placa');
            const picoPlacaErrorElement = document.getElementById('error-pico-placa');
            const errorContainer = document.getElementById('error-container');
            
            // Verificar que los elementos existan
            if (!picoStatusElement || !nextRestrictionElement) {
                console.error('No se encontraron elementos del DOM necesarios para Pico y Placa');
                if (errorContainer) {
                    errorContainer.classList.remove('hidden');
                    errorContainer.textContent = 'Error: No se encontraron elementos necesarios para mostrar información de Pico y Placa. Por favor, recarga la página.';
                }
                return;
            }
            
            // Mostrar indicador de carga si existe
            if (picoPlacaLoadingElement) {
                picoPlacaLoadingElement.classList.remove('hidden');
            }
            
            // Ocultar mensaje de error si existe
            if (picoPlacaErrorElement) {
                picoPlacaErrorElement.classList.add('hidden');
            }
            
            try {
                // Verificar autenticación antes de intentar cargar información
                console.log('Verificando autenticación para cargar información de Pico y Placa');
                let isAuth = false;
                
                try {
                    // Verificar autenticación usando el store primero (más rápido)
                    const authStore = useAuthStore.getState();
                    if (authStore && authStore.isAuthenticated) {
                        isAuth = true;
                    } else {
                        // Si no está autenticado en el store, verificar con el servidor
                        const authResult = await isAuthenticated();
                        isAuth = authResult.isAuthenticated === true;
                    }
                    console.log('Resultado de autenticación para Pico y Placa:', isAuth);
                } catch (authError) {
                    console.error('Error al verificar autenticación para Pico y Placa:', authError);
                    throw new Error('Error de autenticación: ' + (authError instanceof Error ? authError.message : 'Error desconocido'));
                }
                
                if (!isAuth) {
                    console.error('No hay autenticación para cargar información de Pico y Placa');
                    throw new Error('No estás autenticado. Por favor, inicia sesión nuevamente.');
                }
                
                // Definir la interfaz para las reglas de Pico y Placa
                interface PicoYPlacaRules {
                    item1: string[];
                    item2: string[];
                }
                
                // Obtener reglas de Pico y Placa con reintentos
                let rules: PicoYPlacaRules | null = null;
                let retryCount = 0;
                const maxRetries = 2;
                
                // Función para obtener reglas con reintentos
                async function fetchRulesWithRetry(): Promise<PicoYPlacaRules> {
                    try {
                        const result = await getReglasPicoYPlaca() as any;
                        if (!result || !result.item1 || !result.item2) {
                            console.warn('La respuesta de reglas no es válida:', result);
                            throw new Error('Reglas de Pico y Placa no válidas');
                        }
                        return result as PicoYPlacaRules;
                    } catch (error) {
                        console.error(`Error al obtener reglas (intento ${retryCount + 1}/${maxRetries + 1}):`, error);
                        if (retryCount < maxRetries) {
                            retryCount++;
                            console.log(`Reintentando obtener reglas (intento ${retryCount + 1}/${maxRetries + 1})...`);
                            // Esperar antes de reintentar
                            await new Promise(resolve => setTimeout(resolve, 1000));
                            return fetchRulesWithRetry();
                        }
                        throw error;
                    }
                }
                
                try {
                    rules = await fetchRulesWithRetry();
                    console.log('Reglas de Pico y Placa obtenidas:', rules);
                } catch (rulesError) {
                    console.error('Error al obtener reglas después de reintentos:', rulesError);
                    throw new Error('No se pudieron obtener las reglas de Pico y Placa: ' + (rulesError instanceof Error ? rulesError.message : 'Error desconocido'));
                }
                
                // Ocultar indicador de carga
                if (picoPlacaLoadingElement) {
                    picoPlacaLoadingElement.classList.add('hidden');
                }
                
                // Procesar la información de Pico y Placa
                const today = new Date();
                const dayOfWeek = today.getDay(); // 0 = Sunday, 1 = Monday, etc.
                
                // Determinar si hoy hay pico y placa (lunes a viernes)
                const isWeekend = dayOfWeek === 0 || dayOfWeek === 6; // 0 = domingo, 6 = sábado
                
                if (isWeekend) {
                    // No hay pico y placa los fines de semana
                    picoStatusElement.textContent = 'Libre';
                    picoStatusElement.className = 'text-3xl font-bold text-green-600 dark:text-green-400';
                    nextRestrictionElement.textContent = 'Lunes';
                    return;
                }
                
                // Determinar qué regla aplica hoy (par o impar)
                // Lunes y miércoles: item1 (6,7,8,9,0)
                // Martes y jueves: item2 (1,2,3,4,5)
                // Viernes: alternancia según la fecha
                
                let activeRule: string[] = [];
                let nextDay;
                let restrictedDigits = '';
                
                switch (dayOfWeek) {
                    case 1: // Lunes
                        activeRule = [...rules.item1];
                        nextDay = 'Martes';
                        break;
                    case 2: // Martes
                        activeRule = [...rules.item2];
                        nextDay = 'Miércoles';
                        break;
                    case 3: // Miércoles
                        activeRule = [...rules.item1];
                        nextDay = 'Jueves';
                        break;
                    case 4: // Jueves
                        activeRule = [...rules.item2];
                        nextDay = 'Viernes';
                        break;
                    case 5: // Viernes
                        // Alternancia según la fecha
                        const date = today.getDate();
                        activeRule = date % 2 === 0 ? [...rules.item2] : [...rules.item1];
                        nextDay = 'Lunes';
                        break;
                    default:
                        activeRule = [];
                        nextDay = 'Lunes';
                }
                
                // Formatear los dígitos restringidos para mostrar
                if (Array.isArray(activeRule) && activeRule.length > 0) {
                    restrictedDigits = activeRule.join(', ');
                }
                
                // Actualizar la interfaz
                picoStatusElement.textContent = 'Activo';
                picoStatusElement.className = 'text-3xl font-bold text-red-600 dark:text-red-400';
                nextRestrictionElement.innerHTML = `${nextDay} <span class="text-sm font-normal">(Hoy: ${restrictedDigits})</span>`;
                
                console.log('Información de Pico y Placa cargada correctamente');
                
            } catch (error) {
                console.error('Error loading Pico y Placa info:', error);
                console.error('Detalles del error:', error instanceof Error ? error.message : 'Error desconocido');
                
                // Ocultar indicador de carga
                if (picoPlacaLoadingElement) {
                    picoPlacaLoadingElement.classList.add('hidden');
                }
                
                // Mostrar mensaje de error
                if (picoPlacaErrorElement) {
                    picoPlacaErrorElement.classList.remove('hidden');
                    picoPlacaErrorElement.innerHTML = `
                        <p>Error al cargar información de Pico y Placa. <button id="retry-pico-placa" class="text-blue-600 hover:underline">Reintentar</button></p>
                        <p class="text-xs text-red-500">${error instanceof Error ? error.message : 'Error desconocido'}</p>
                    `;
                    
                    // Agregar evento al botón de reintento
                    const retryButton = document.getElementById('retry-pico-placa');
                    if (retryButton) {
                        retryButton.addEventListener('click', loadPicoYPlacaInfo);
                    }
                }
                
                if (picoStatusElement) {
                    picoStatusElement.textContent = 'Error';
                    picoStatusElement.className = 'text-3xl font-bold text-gray-600 dark:text-gray-400';
                }
                
                if (nextRestrictionElement) {
                    nextRestrictionElement.textContent = 'Error al cargar';
                }
            }
        }
    </script>
</UserLayout>
