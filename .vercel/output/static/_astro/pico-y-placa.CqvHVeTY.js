import{a as S}from"./api.yQKbUgAA.js";async function m(r,a=new Date,i=!1){try{if(r=r.toUpperCase(),console.log("Verificando si puede circular",{placa:r,fecha:a.toISOString(),tipoVehiculoExento:i}),!r||typeof r!="string"||r.length<5)return console.warn("Placa inválida",{placa:r}),{puedeCircular:!1,mensaje:"Placa inválida",reglaAplicada:null};const e=r.slice(-1);console.debug("Último dígito de la placa",{ultimoDigito:e});const s=a.getDay(),c=a.getHours()+a.getMinutes()/60,l=a.toISOString().slice(0,10),g=a.getDate(),o=g%2===0;if(console.debug("Información de fecha",{diaSemana:s,hora:c,fechaISO:l,dia:g,diaEsPar:o}),[0,6].includes(s))return console.log("Es fin de semana, puede circular",{diaSemana:s}),{puedeCircular:!0,mensaje:"Fin de semana: sin restricción",reglaAplicada:null};if(l==="2023-07-20"||l==="2023-12-25")return console.log("Es festivo, puede circular",{fechaISO:l}),{puedeCircular:!0,mensaje:"Día festivo: sin restricción",reglaAplicada:null};if(c<6||c>=21)return console.log("Fuera de horario de restricción, puede circular",{hora:c}),{puedeCircular:!0,mensaje:"Fuera de horario de restricción (6:00 AM a 9:00 PM)",reglaAplicada:null};if(i)return console.log("Vehículo exento, puede circular",{tipoVehiculoExento:i}),{puedeCircular:!0,mensaje:"Vehículo exento de restricción",reglaAplicada:null};const t=await S();console.log("Usando reglas de pico y placa del endpoint",t);const n=o?t.item2:t.item1;console.log("Dígitos restringidos para hoy:",{diaEsPar:o,digitosRestringidos:n,ultimoDigito:e});const p=n.includes(e);console.log("Verificación de restricción:",{ultimoDigito:e,digitosRestringidos:n,estaRestringido:p});const d=!p,f={id:o?2:1,Ultimo_Digito:n,tipo:"Restricción"};console.debug("Regla aplicable",{reglaAplicada:f}),console.log("Resultado de verificación",{puedeCircular:d,ultimoDigito:e,digitosRestringidos:n,diaEsPar:o});let u="";return d?u=`Puede circular: placa terminada en ${e} no está restringida en día ${o?"par":"impar"}`:u=`No puede circular: placa terminada en ${e} está restringida en día ${o?"par":"impar"}`,{puedeCircular:d,mensaje:u,reglaAplicada:f}}catch(e){return console.error("Error al verificar si puede circular",{message:e.message,stack:e.stack}),{puedeCircular:!0,mensaje:"Error al verificar restricción: se permite circular",reglaAplicada:null,error:e.message}}}async function A(r,a=!1,i=new Date){try{r=r.toUpperCase(),console.log("Verificando pico y placa para:",{placa:r,fecha:i.toISOString(),tipoVehiculoExento:a});const e=await m(r,i,a);console.log("Resultado de puedeCircular:",e);const s={estado:e.puedeCircular?"PERMITIDO":"RESTRINGIDO",color:e.puedeCircular?"green":"red",mensaje:e.mensaje,detalles:{placa:r,fecha:i.toISOString(),tipoVehiculoExento:a,reglaAplicada:e.reglaAplicada}};return console.log("Estado final calculado:",s),s}catch(e){return console.error("Error al obtener estado de pico y placa",{message:e.message,stack:e.stack}),{estado:"ERROR",color:"yellow",mensaje:"Error al verificar el estado de pico y placa",detalles:{placa:r,fecha:new Date().toISOString(),error:e.message}}}}async function I(r,a,i=!1){r=r.toUpperCase();const e=new Date;return a<e?(console.warn("La fecha proporcionada no es futura",{fechaProporcionada:a.toISOString(),fechaActual:e.toISOString()}),{puedeCircular:!1,mensaje:"La fecha proporcionada debe ser futura",reglaAplicada:null}):await m(r,a,i)}export{A as getEstadoPicoYPlaca,m as puedeCircular,I as verificarFechaFutura};
